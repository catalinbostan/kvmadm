#!/usr/bin/env perl

use FindBin;
# PERL5LIB
use lib "$FindBin::Bin/../lib";
use strict;
use warnings;

use File::Basename;
use IO::Socket::UNIX qw(SOCK_STREAM);
use KVMadm::Config;

#SMF constants
my %SMF_STATUS = (
    SMF_EXIT_OK          => 0,
    SMF_EXIT_ERR_FATAL   => 95,
    SMF_EXIT_ERR_CONFIG  => 96,
    SMF_EXIT_MON_DEGRADE => 97,
    SMF_EXIT_MON_OFFLINE => 98,
    SMF_EXIT_ERR_NOSMF   => 99,
    SMF_EXIT_ERR_PERM    => 100,
);

my $RUN_PATH = '/var/run/kvm';
my $FMRI    = 'svc:/system/kvm';


# check if FMRI is set
$ENV{SMF_FMRI} || do {
    print "SMF framework variables are not initialised.\n";
    exit $SMF_STATUS{SMF_EXIT_ERR_FATAL};
};

# check if run directory exists
-d $RUN_PATH || mkdir $RUN_PATH || do {
    print "Cannot create directory $RUN_PATH\n";
    exit $SMF_STATUS{SMF_EXIT_ERR_FATAL};   
};

my ($kvmName) = $ENV{SMF_FMRI} =~ /^$FMRI:(\w+)$/;

for (shift){
    /^start$/ && do {
        my $config = KVMadm::Config->new();
        my @cmdArray;

        local $@;
        eval {
            local $SIG{__DIE__};
            @cmdArray = @{$config->getKVMCmdArray($kvmName)};
        };
        if($@){
            print "$@\n";
            exit $SMF_STATUS{SMF_EXIT_ERR_CONFIG};
        }

### TESTING
        print join("\n", @cmdArray);
        exit $SMF_STATUS{SMF_EXIT_OK};
### TESTING END
        system(@cmdArray) && do {
            print "Cannot run KVM $kvmName\n";
            exit $SMF_STATUS{SMF_EXIT_ERR_FATAL};
        };
        last;
    };

    /^stop$/ && do {
        my $sock = IO::Socket::UNIX->new(
            Type => SOCK_STREAM,
            Peer => $RUN_PATH . '/' . $kvmName . '.monitor',
        ) || do {
            print "Cannot open socket $!\n";
            exit $SMF_STATUS{SMF_EXIT_ERR_FATAL};
        };
        print $sock "system_powerdown\n";
        last;
    };

    #default
    print 'usage: ' . basename($0) . " { start | stop }\n";
    exit $SMF_STATUS{SMF_EXIT_ERR_FATAL};
}

exit $SMF_STATUS{SMF_EXIT_OK};

1;

